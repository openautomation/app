{
  "name": "serialport-manager",
  "version": "0.2.3",
  "description": "single process manager of transient serialport connections",
  "main": "index.js",
  "scripts": {
    "test": "tap ./test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/tmpvar/serialport-manager.git"
  },
  "bin": {
    "serialport-daemon": "bin/daemon.js"
  },
  "keywords": [
    "serialport",
    "hardware"
  ],
  "author": {
    "name": "Elijah Insua",
    "email": "tmpvar@gmail.com"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "dependencies": {
    "serialport": "git://github.com/voodootikigod/node-serialport.git",
    "async": "~0.1.22",
    "netutil": "0.0.1",
    "defaults": "~1.0.0",
    "sproc": "~0.1.0",
    "split": "~0.1.2"
  },
  "readme": "# serialport-manager\n\nManage transient serialport connections.\n\n## Install\n\n`npm install serialport-manager`\n\n## Use\n\n```javascript\n\nvar spm = require('serialport-manager');\n\nspm(function(err, connection, deviceList) {\n  connection.write(deviceList[0].comName + '\\n');\n  connection.pipe(process.stdout);\n});\n\n```\n\n### How does it work\n\ncalling `spm` above performs the following actions:\n\n* attempt connection to the serialport manager daemon\n * if the connection fails, spawn the daemon\n  * reconnect\n* on connection, wait for the device list\n* parse the json device list\n* call the function passed into `spm`\n* identify what device you want to use by sending back the `commName`\n* bind to data events or pipe somewhere\n\n## Why?\n\nI want plug and play serial devices. I also want them to be accessible by more than one program.\n\n## License\n\nMIT\n\n",
  "bugs": {
    "url": "https://github.com/tmpvar/serialport-manager/issues"
  },
  "homepage": "https://github.com/tmpvar/serialport-manager",
  "_id": "serialport-manager@0.2.3",
  "_from": "serialport-manager@~0.2.2"
}
